#include <iostream>
using namespace std;

class clsAddress
{
    string _AddressLine1;
    string _AddressLine2;
    string _POBox;
    string _ZipCode;

public:
    
    clsAddress(string AddressLine1, string AddressLine2, string POBox, string ZipCode) {
        _AddressLine1 = AddressLine1;
        _AddressLine2 = AddressLine2;
        _POBox = POBox;
        _ZipCode = ZipCode;
    }

    // Copy Constructor (Not needed generated by default from compiler)
    //clsAddress(clsAddress & old_obj) {
    //    _AddressLine1 = old_obj.GetAddressLine1();
    //    _AddressLine2 = old_obj.GetAddressLine2();
    //    _POBox = old_obj.GetPOBox();
    //    _ZipCode = old_obj.GetZipCode();
    //}

    void SetAddressLine1(string AddressLine1) {
        _AddressLine1 = AddressLine1;
    }

    string GetAddressLine1() {
        return _AddressLine1;
    }

    void SetAddressLine2(string AddressLine2) {
        _AddressLine2 = AddressLine2;
    }

    string GetAddressLine2() {
        return _AddressLine2;
    }

    void SetPOBox(string POBox) {
        _POBox = POBox;
    }

    string GetPOBox() {
        return _POBox;
    }

    void SetZipCode(string ZipCode) {
        _ZipCode = ZipCode;
    }

    string GetZipCode() {
        return _ZipCode;
    }

    void Print() {
        cout << "\nAddress Details:\n";         
        cout << "------------------------";         
        cout << "\nAddressLine1: " << _AddressLine1 << endl;         
        cout << "AddressLine2: " << _AddressLine2 << endl;         
        cout << "POBox       : " << _POBox << endl;         
        cout << "ZipCode     : " << _ZipCode << endl;
    }

    //This is destructor will be called when object is destroyed.
    ~clsAddress()
    {         
        cout << "\nHi, I'm Destructor\n";     
    }
};

int main()
{
    
    clsAddress Address1("123 Main St", "Apt 4B", "P.O. Box 100", "90210");
    Address1.Print();

    clsAddress Address2 = Address1;
    Address2.Print();

    clsAddress* Address3 = new clsAddress("123 Main St", "Apt 4B", "P.O. Box 100", "90210");
    // Dynamically allocated objects (created with 'new') must be manually deallocated using 'delete'
    // to prevent memory leaks and ensure the destructor is called.
    delete Address3;

    return 0;
}

